plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

def requiredProp = { key, fallback = null ->
    if (project.hasProperty(key)) return project.property(key)
    else if (fallback != null) return fallback
    else throw new GradleException("Missing required property: ${key}")
}

repositories {
    maven { url = "https://maven.createmod.net/" }
    maven { url = "https://maven.ithundxr.dev/mirror" }
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
    maven { url = "https://maven.tterrag.dev/releases" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://maven.minecraftforge.net/" }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

  
    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}")
    implementation fg.deobf("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")
    compileOnly fg.deobf("dev.engine-room.flywheel:flywheel-forge-api-${minecraft_version}:${flywheel_version}")
    runtimeOnly fg.deobf("dev.engine-room.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    compileOnly annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1")
    implementation "io.github.llamalad7:mixinextras-forge:0.4.1"
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api@jar")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}@jar")
}

def modId          = requiredProp("mod_id", "waypoint")
def modVersion     = requiredProp("mod_version", "1.0.0")
def modGroupId     = requiredProp("mod_group_id", "net.blue.waypoint")
def modName        = requiredProp("mod_name", "Waypoint")
def modAuthors     = requiredProp("mod_authors", "Blue_Gamerwolf")
def modLicense     = requiredProp("mod_license", "MIT")
def modDescription = requiredProp("mod_description", "A standalone waypoint system for Minecraft.")

project.version = modVersion
group = modGroupId

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "official", version: "1.20.1"
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${modId}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', modId
            property 'mixin.env.remapRefMap', 'true'
        }

        server {
            property 'forge.enabledGameTestNamespaces', modId
            args '--nogui'
            property 'mixin.env.remapRefMap', 'true'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', modId
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', modId, '--all',
                 '--output', file('src/generated/resources/'),
                 '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

tasks.named('processResources', ProcessResources).configure {
    def replaceProperties = [
        minecraft_version: minecraft_version,
        forge_version: forge_version,
        mod_id: modId,
        mod_name: modName,
        mod_license: modLicense,
        mod_version: modVersion,
        mod_authors: modAuthors,
        mod_description: modDescription
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes(
            'Specification-Title': modId,
            'Specification-Vendor': modAuthors,
            'Specification-Version': '1',
            'Implementation-Title': project.name,
            'Implementation-Version': project.jar.archiveVersion,
            'Implementation-Vendor': modAuthors,
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven { url "file://${project.projectDir}/mcmodsrepo" }
    }
}
